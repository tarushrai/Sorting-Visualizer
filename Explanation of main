1. Headers and Libraries
#include <iostream>: This includes the I/O stream library, which allows for input and output operations in C++, such as printing to the console using std::cout.
#include <vector>: This header file provides the std::vector container, a dynamic array that automatically resizes as elements are added or removed.
#include <thread>: This header gives access to threading functionality in C++. Specifically, we are using std::this_thread::sleep_for to pause the program's execution for a short duration to visualize the sorting process.
#include <chrono>: This header allows us to work with time-related functions. Here, we use std::chrono::milliseconds to specify the duration of the sleep function (in milliseconds).

2. visualize() Function
This function visually displays the array on the console, and it can "highlight" a specific element by placing it in square brackets (e.g., [5]). It also pauses the program for 100 milliseconds after displaying the array so the user can see the progression of the sorting step by step.
const std::vector<int>& arr: This takes the array (std::vector<int>) as input. The const qualifier ensures the function doesn't modify the array, and the & means it is passed by reference to avoid making unnecessary copies.
int highlight = -1: This optional parameter indicates which element in the array should be highlighted. By default, it's set to -1, meaning no element will be highlighted. When highlight is a valid index, the corresponding element will be surrounded by square brackets.
Function Logic: 
Looping over the array: The function uses a for loop to iterate over the elements in the array. Here, arr.size() returns the number of elements in the vector.
std::this_thread::sleep_for(std::chrono::milliseconds(100)); - This line tells the program to "sleep" for 100 milliseconds (i.e., pause the execution). This is important in visualizing sorting since it introduces a delay between array state changes, allowing the user to see each step more clearly.

3. main() Function
The main() function serves as the entry point of the program. Here, it initializes an array (std::vector<int>) with the values {12, 11, 13, 5, 6, 7} and then calls the visualize() function to display the array.
Array Initialization:
This creates a std::vector<int> named arr containing the elements {12, 11, 13, 5, 6, 7}. A vector is a dynamic array, meaning its size can grow or shrink during runtime, but here it's initialized with fixed values.
Calling visualize():
The visualize() function is called with arr as an argument. Since we are not passing a second argument (highlight), it defaults to -1, so no element is highlighted.
Program End:
The main() function returns 0, which is the conventional way to signal that the program executed successfully.

What Does the Code Do?
The program creates a vector (array) with 6 integers and calls the visualize() function to display this array.
The visualize() function prints the array, then pauses the execution for 100 milliseconds using std::this_thread::sleep_for.
The program doesnâ€™t yet implement sorting, but this structure could easily be expanded by adding sorting functions that call visualize() to display the array after each change.

How to Extend the Code for Sorting:
In a complete sorting visualizer, you would call the visualize() function inside your sorting algorithms (Bubble Sort, Quick Sort, etc.) after each major step to display how the array changes. For example, after each swap in Bubble Sort or after each partition step in Quick Sort, you'd call visualize() to show the intermediate states of the array.
This extended version is already present in this repository only, by the name of main2.cpp
